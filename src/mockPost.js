import banner from './assets/images/posts/02.png'

export const mockPost = {
	id: 1,
	title: "Manage data in Docker",
	description: "How to use volumes and bind mounts in Docker.",
	content: "<p>Imagining your running containers are forced to stop for an unexpected reason. How can you back upthe data of those containers when you don’t store it in advance?</p><h1 id=\"brief-contents\">Brief contents</h1><ul class=\"markdown\">  <li><a href=\"#introduction\">Introduction</a></li>  <li><a href=\"#post-premise\">Post premise</a></li>  <li><a href=\"#target-audience\">Target audience</a></li>  <li><a href=\"#practical-example\">Practical example</a></li>  <li><a href=\"#ways-to-manage-data-in-docker\">Ways to manage data in Docker</a></li>  <li><a href=\"#use-volumes\">Use volumes</a></li>  <li><a href=\"#use-bind-mounts\">Use bind mounts</a></li>  <li><a href=\"#summary\">Summary</a></li>  <li><a href=\"#references\">References</a></li></ul><h2 id=\"introduction\">Introduction</h2><p>The data of a container doesn’t persist when that container no longer exists, and it can be difficult to get the data out of the container if another process needs it.So in this post, I would like to show you how to use Docker command to save the data.</p><h2 id=\"post-premise\">Post premise</h2><p>Coming from the passion of sharing of mine towards readers. And after surfing some references and guidanceso hopefully, this little knowledge could be helpful for you in learning as well as working that you encounter.</p><h2 id=\"target-audience\">Target audience</h2><p>This post is heading towards to the people taking a step to learn to get familiar with docker.</p><h2 id=\"practical-example\">Practical example</h2><p>Suppose I have a database that runs as a container:</p><div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>docker run <span class=\"nt\">--name</span> no-persisted-db <span class=\"nt\">-d</span> <span class=\"nt\">-p</span> 4306:3306 <span class=\"nt\">-e</span> <span class=\"nv\">MYSQL_ALLOW_EMPTY_PASSWORD</span><span class=\"o\">=</span>YES mysql:latest</code></pre></div></div><p>After I have created a schema and filled in some data in that database,the data is unfortunately gone, for my PC loses power.</p><div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>docker <span class=\"nb\">rm </span>no-persisted-db <span class=\"nt\">-f</span></code></pre></div></div><p>You don’t have to turn off your PC in order to procedure the case. Just type the above command :))</p><p>Let make it right! Try the following command:</p><div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>docker run <span class=\"nt\">--name</span> persisted-db <span class=\"nt\">-d</span> <span class=\"nt\">-p</span> 4306:3306 <span class=\"nt\">-e</span> <span class=\"nv\">MYSQL_ALLOW_EMPTY_PASSWORD</span><span class=\"o\">=</span>YES <span class=\"nt\">-v</span> lib-mysql:/var/lib/mysql mysql:latest</code></pre></div></div><p>From now, when you stop/remove the container, the data will still persist, because the data is now mapped on the <strong>Docker host</strong>.</p><h2 id=\"ways-to-manage-data-in-docker\">Ways to manage data in Docker</h2><p><img src=\"/img/posts/02-schema.png\"></p><p>Docker has two options for containers to store files in the host machine, so that files arepersisted even after the container stops: <strong>volumes</strong>, and <strong>bind mounts</strong>.</p><h2 id=\"use-volumes\">Use volumes</h2><blockquote>  <p><strong>Volumes</strong> are stored in a part of the host filesystem which is managed by Docker (<code class=\"highlighter-rouge\">/var/lib/docker/volumes</code> on Linux).</p></blockquote><p>You can create a new volume by using the following command:</p><div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>docker volume create my-vol</code></pre></div></div><p>If you start a container with a volume that does not yet exist, Docker creates the volume for you.</p><div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>docker run <span class=\"nt\">--name</span> persisted-db <span class=\"nt\">-d</span> <span class=\"nt\">-p</span> 4306:3306 <span class=\"nt\">-e</span> <span class=\"nv\">MYSQL_ALLOW_EMPTY_PASSWORD</span><span class=\"o\">=</span>YES <span class=\"nt\">-v</span> lib-mysql:/var/lib/mysql mysql:latest</code></pre></div></div><p>With the above command, Docker will create a new volume if <code class=\"highlighter-rouge\">lib-mysql</code> volume does not exist.</p><p><code class=\"highlighter-rouge\">-v</code> or <code class=\"highlighter-rouge\">--volume</code>: Consists of three fields, separated by colon characters (<code class=\"highlighter-rouge\">:</code>).The fields must be in the correct order, and the meaning of each field is not immediatelyobvious.</p><ul>  <li>The first field is a volume name. If not specified, it will be considered as anonymous volumes.</li>  <li>The second field is the path where the file or directory is mounted in the container</li>  <li>The third field is optional, and is a comma-separated list of options, such as <code class=\"highlighter-rouge\">ro</code>.<span class=\"markdown\"><a target=\"_blank\" href=\"https://docs.docker.com/storage/volumes/#use-a-read-only-volume\">Refer to</a></span></li></ul><h3 id=\"create-and-manage-volumes\">Create and manage volumes</h3><p>There are few command to create and manage volumes. No need to remember you can look up thosecommands by using <code class=\"highlighter-rouge\">docker volume --help</code>. The following are few examples.</p><p><strong>Create a volume:</strong></p><div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>docker volume create lib-mysql</code></pre></div></div><p><strong>List volumes:</strong></p><div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>docker volume <span class=\"nb\">lslocal       </span>lib-mysql</code></pre></div></div><p><strong>Inspect a volume:</strong></p><div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>docker volume inspect lib-mysql<span class=\"o\">[</span>    <span class=\"o\">{</span>        <span class=\"s2\">\"Driver\"</span>: <span class=\"s2\">\"local\"</span>,        <span class=\"s2\">\"Labels\"</span>: <span class=\"o\">{}</span>,        <span class=\"s2\">\"Mountpoint\"</span>: <span class=\"s2\">\"/var/lib/docker/volumes/lib-mysql/_data\"</span>,        <span class=\"s2\">\"Name\"</span>: <span class=\"s2\">\"lib-mysql\"</span>,        <span class=\"s2\">\"Options\"</span>: <span class=\"o\">{}</span>,        <span class=\"s2\">\"Scope\"</span>: <span class=\"s2\">\"local\"</span>    <span class=\"o\">}</span><span class=\"o\">]</span></code></pre></div></div><p><strong>Remove a volume:</strong></p><div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>docker volume <span class=\"nb\">rm </span>lib-mysql</code></pre></div></div><h2 id=\"use-bind-mounts\">Use bind mounts</h2><blockquote>  <p><strong>Bind mounts</strong> may be stored anywhere in host machine. They may even be important system filesor directories. Non-Docker processes on the Docker host or a Docker container can modify them at any time.</p></blockquote><p>Consider a case where you have a source directory and that each time you build the source codeon the Docker host, you want the artifacts to be available to the container that gets access to the rebuilt artifacts.</p><p>For example, I want a <code class=\"highlighter-rouge\">dist/</code> folder after built by <code class=\"highlighter-rouge\">Angular</code> CLI is available to <code class=\"highlighter-rouge\">/usr/share/nginx/html</code> location on a <code class=\"highlighter-rouge\">NGINX</code>container. Let’s follow these steps to create bind mounts:</p><ol>  <li>    <p>Open a terminal on Linux. For me, I’m using Window OS so I run <code class=\"highlighter-rouge\">Powershell</code> terminal.</p>  </li>  <li>    <p>Point to your intended mount folder path. Moreover, you can create a private folder, then copy the built artifact to the folder.<br><img class=\"border\" src=\"/img/posts/02-1.png\"></p>  </li>  <li>Let’s type the following command:    <div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>docker run <span class=\"nt\">-d</span> <span class=\"nt\">-p</span> 80:80 <span class=\"nt\">-v</span> <span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">pwd</span><span class=\"k\">}</span><span class=\"s2\">:/usr/share/nginx/html\"</span> nginx:latest</code></pre></div>    </div>    <p>Here, the <code class=\"highlighter-rouge\">${pwd}</code> sub-command specify the current working directory on the host machine.</p>  </li>  <li>Let’s now browse the <code class=\"highlighter-rouge\">localhost:80</code> to see the result.<br><img class=\"border\" src=\"/img/posts/02-2.png\"></li></ol><blockquote>  <p>We also use the <code class=\"highlighter-rouge\">-v</code> option for bind mounts, but different in terms of meaning:</p></blockquote><p><code class=\"highlighter-rouge\">-v</code> or <code class=\"highlighter-rouge\">--volume</code>: Consists of three fields, separated by colon characters (<code class=\"highlighter-rouge\">:</code>).The fields must be in the correct order, and the meaning of each field is not immediatelyobvious.</p><ul>  <li>The first field is the path to the file or directory on the <strong>host machine</strong></li>  <li>The second field is the path where the file or directory is mounted in the container</li>  <li>The third field is optional, and is comma-separated list of options, such as <code class=\"highlighter-rouge\">ro</code>,<code class=\"highlighter-rouge\">consistent</code>, <code class=\"highlighter-rouge\">delegated</code>, <code class=\"highlighter-rouge\">cached</code>, <code class=\"highlighter-rouge\">z</code>, and <code class=\"highlighter-rouge\">Z</code>.<span class=\"markdown\"><a target=\"_blank\" href=\"https://docs.docker.com/storage/bind-mounts/#configure-bind-propagation\">Refer to</a></span></li></ul><h2 id=\"summary\">Summary</h2><p>Depending on your previous experience with Docker, this post might have been a steep learning curve.You should now</p><ul>  <li>Understand why need to manage data in Docker</li>  <li>Distinguish between volumes and bind mounts</li>  <li>Be able to choose the right type of mount</li></ul><h2 id=\"references\">References</h2><ul class=\"markdown\">  <li><a href=\"https://docs.docker.com/storage/\" target=\"_blank\">Manage data in Docker</a></li>  <li><a href=\"https://docs.docker.com/storage/volumes/\" target=\"_blank\">Use volumes</a></li>  <li><a href=\"https://docs.docker.com/storage/bind-mounts/\" target=\"_blank\">Use bind mounts</a></li>  <li><a href=\"http://www.allitebooks.org/docker-in-practice/\" target=\"_blank\">Docker in practice</a></li></ul>        <hr>        <div id=\"disqus_thread\"></div>  ",
	background: banner,
	date: "2021-11-02",
	author: {
		username: "test",
		password: "test",
		firstName: "Hoang",
		lastName: "Nguyen",
		email: "test@google.com",
		birthdate: null,
		added: "1984-12-01"
	}
}
